rules_version = '2';
service firebase.storage {
	match /b/{bucket}/o {
		
		// Gear folder
		match /gear/{gearId}/{allPaths=**} {
			allow write: if isGearOwner(gearId) && isValidFile();
			allow read: if true; // public read
		}

		// Trip folder
		match /trip/{tripId}/{allPaths=**} {
			allow write: if isTripOwner(tripId) && isValidFile();
			allow read: if true; // public read
		}

		// User folder
		match /user/{userId}/{allPaths=**} {
			allow write: if request.auth != null && request.auth.uid == userId && isValidFile();
			allow read: if true; // public read
		}

		// Helper functions
		function isGearOwner(gearId) {
			return request.auth != null &&
				firestore.exists(/databases/(default)/documents/gear/$(gearId)) &&
				firestore.get(/databases/(default)/documents/gear/$(gearId)).data.role[request.auth.uid] == 'owner';
		}

		function isTripOwner(tripId) {
			return request.auth != null &&
				firestore.exists(/databases/(default)/documents/trip/$(tripId)) &&
				firestore.get(/databases/(default)/documents/trip/$(tripId)).data.role[request.auth.uid] == 'owner';
		}

		function isValidFile() {
			return request.resource.size < 5 * 1024 * 1024 // max 5MB
				&& request.resource.contentType.matches('image/.*'); // allow only images
		}
	}
}
